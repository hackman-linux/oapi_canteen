# Generated by Django 5.0.7 on 2025-08-08 13:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('role', models.CharField(choices=[('USER', 'User'), ('CANTEEN_MANAGER', 'Canteen Manager'), ('SYSTEM_ADMIN', 'System Admin'), ('CANTEEN_ADMIN', 'Canteen Admin')], default='USER', help_text='User role for permission management', max_length=20)),
                ('phone', models.CharField(blank=True, help_text='Phone number for mobile money payments', max_length=15, null=True)),
                ('department', models.CharField(blank=True, help_text='Department or division', max_length=100, null=True)),
                ('employee_id', models.CharField(blank=True, help_text='Employee identification number', max_length=20, null=True, unique=True)),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='avatars/')),
                ('is_active_employee', models.BooleanField(default=True, help_text='Whether the employee is currently active')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Brief biography or description', max_length=500)),
                ('birth_date', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('address', models.TextField(blank=True, help_text='Home address')),
                ('emergency_contact', models.CharField(blank=True, help_text='Emergency contact person', max_length=100)),
                ('emergency_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=15)),
                ('dietary_restrictions', models.TextField(blank=True, help_text='Any dietary restrictions or allergies')),
                ('preferred_payment_method', models.CharField(choices=[('ORANGE', 'Orange Money'), ('MTN', 'MTN Mobile Money'), ('CASH', 'Cash')], default='ORANGE', help_text='Preferred payment method', max_length=20)),
                ('notification_preferences', models.JSONField(default=dict, help_text='User notification preferences')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
    ]
