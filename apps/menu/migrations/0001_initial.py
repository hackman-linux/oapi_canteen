# Generated by Django 5.0.7 on 2025-08-08 13:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., Main Dishes, Beverages)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text='Bootstrap or Font Awesome icon class', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code for category display', max_length=7)),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying categories (lower numbers first)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'menu_categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Menu item name', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the menu item')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in XAF (Central African Francs)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('image', models.ImageField(blank=True, help_text='Image of the menu item', null=True, upload_to='menu_items/')),
                ('preparation_time', models.PositiveIntegerField(default=15, help_text='Estimated preparation time in minutes')),
                ('calories', models.PositiveIntegerField(blank=True, help_text='Estimated calories per serving', null=True)),
                ('ingredients', models.TextField(blank=True, help_text='Main ingredients (comma-separated)')),
                ('allergens', models.TextField(blank=True, help_text='Known allergens (comma-separated)')),
                ('is_vegetarian', models.BooleanField(default=False, help_text='Whether this item is vegetarian')),
                ('is_vegan', models.BooleanField(default=False, help_text='Whether this item is vegan')),
                ('is_spicy', models.BooleanField(default=False, help_text='Whether this item is spicy')),
                ('spice_level', models.PositiveIntegerField(choices=[(1, 'Mild'), (2, 'Medium'), (3, 'Hot'), (4, 'Very Hot')], default=1, help_text='Spice level (1-4)')),
                ('is_available', models.BooleanField(default=True, help_text='Whether this item is currently available')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this item')),
                ('daily_limit', models.PositiveIntegerField(blank=True, help_text='Daily serving limit (null for unlimited)', null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average customer rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_orders', models.PositiveIntegerField(default=0, help_text='Total number of times this item has been ordered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Category this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='menu.category')),
                ('created_by', models.ForeignKey(help_text='User who created this menu item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_menu_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'db_table': 'menu_items',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date for this availability')),
                ('meal_period', models.CharField(choices=[('BREAKFAST', 'Breakfast (6:00 - 10:00)'), ('LUNCH', 'Lunch (11:00 - 15:00)'), ('DINNER', 'Dinner (17:00 - 21:00)'), ('ALL_DAY', 'All Day')], default='ALL_DAY', help_text='When this item is available', max_length=20)),
                ('special_price', models.DecimalField(blank=True, decimal_places=2, help_text='Special price for this day (optional)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_available', models.PositiveIntegerField(blank=True, help_text='Specific quantity available (overrides daily limit)', null=True)),
                ('is_special_offer', models.BooleanField(default=False, help_text='Mark as special offer')),
                ('notes', models.TextField(blank=True, help_text='Special notes for this availability')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_schedule', to='menu.menuitem')),
            ],
            options={
                'verbose_name': 'Menu Availability',
                'verbose_name_plural': 'Menu Availability',
                'db_table': 'menu_availability',
                'ordering': ['date', 'meal_period'],
            },
        ),
        migrations.CreateModel(
            name='MenuReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rating from 1 to 5 stars')),
                ('comment', models.TextField(blank=True, help_text='Optional review comment')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether this review is approved for display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='menu.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Review',
                'verbose_name_plural': 'Menu Reviews',
                'db_table': 'menu_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['category', 'is_available'], name='menu_items_categor_841ca3_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_featured', 'is_available'], name='menu_items_is_feat_58f94f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menuavailability',
            unique_together={('menu_item', 'date', 'meal_period')},
        ),
        migrations.AlterUniqueTogether(
            name='menureview',
            unique_together={('menu_item', 'user')},
        ),
    ]
