# Generated by Django 5.0.7 on 2025-08-08 18:15

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Payment method name', max_length=50)),
                ('provider', models.CharField(choices=[('ORANGE', 'Orange Money'), ('MTN', 'MTN Mobile Money'), ('CASH', 'Cash Payment'), ('CARD', 'Credit/Debit Card')], help_text='Payment provider', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this payment method is currently active')),
                ('minimum_amount', models.DecimalField(decimal_places=2, default=Decimal('100.00'), help_text='Minimum transaction amount in XAF', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('maximum_amount', models.DecimalField(decimal_places=2, default=Decimal('500000.00'), help_text='Maximum transaction amount in XAF', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('transaction_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Transaction fee percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('fixed_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fixed transaction fee in XAF', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('api_configuration', models.JSONField(default=dict, help_text='API configuration parameters')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers first)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'db_table': 'payment_methods',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique payment identifier', unique=True)),
                ('transaction_id', models.CharField(blank=True, help_text='External transaction ID from payment provider', max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount in XAF', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Transaction fees', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount including fees', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='XAF', help_text='Currency code', max_length=3)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('EXPIRED', 'Expired')], default='PENDING', help_text='Current payment status', max_length=20)),
                ('customer_phone', models.CharField(help_text='Customer phone number for mobile money', max_length=15)),
                ('customer_email', models.EmailField(blank=True, help_text='Customer email for notifications', max_length=254)),
                ('provider_data', models.JSONField(default=dict, help_text='Provider-specific transaction data')),
                ('provider_response', models.JSONField(default=dict, help_text='Raw response from payment provider')),
                ('description', models.TextField(blank=True, help_text='Payment description')),
                ('reference', models.CharField(blank=True, help_text='Internal reference number', max_length=100)),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When payment was processed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When payment request expires', null=True)),
                ('refunded_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount refunded', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('refund_reason', models.TextField(blank=True, help_text='Reason for refund')),
                ('refunded_at', models.DateTimeField(blank=True, help_text='When refund was processed', null=True)),
                ('order', models.ForeignKey(help_text='Order this payment is for', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='orders.order')),
                ('refunded_by', models.ForeignKey(blank=True, help_text='Staff member who processed the refund', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User making the payment', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
                ('payment_method', models.ForeignKey(help_text='Payment method used', on_delete=django.db.models.deletion.PROTECT, to='payments.paymentmethod')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('EXPIRED', 'Expired')], help_text='Previous status', max_length=20)),
                ('new_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('EXPIRED', 'Expired')], help_text='New status', max_length=20)),
                ('provider_response', models.JSONField(default=dict, help_text='Provider response at time of status change')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='payments.payment')),
            ],
            options={
                'verbose_name': 'Payment Status History',
                'verbose_name_plural': 'Payment Status Histories',
                'db_table': 'payment_status_history',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refund_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('reason', models.TextField(help_text='Reason for refund')),
                ('provider_refund_id', models.CharField(blank=True, help_text='Refund ID from payment provider', max_length=100)),
                ('provider_response', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='payments.payment')),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds_detail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Refund',
                'verbose_name_plural': 'Refunds',
                'db_table': 'refunds',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status', 'created_at'], name='payments_status_426d4f_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_id'], name='payments_transac_a1f824_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user', 'status'], name='payments_user_id_1b771c_idx'),
        ),
    ]
